# pages/managerView.py
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from utils import display_sidebar, get_latest_metrics, get_metrics_history, render_no_data, minutes_to_days, format_rating

st.set_page_config(page_title="Vis√£o Executiva", page_icon="üë®‚Äçüíº", layout="wide")

# T√≠tulo e descri√ß√£o
st.title("üë®‚Äçüíº Vis√£o Executiva")
st.markdown("M√©tricas de alto n√≠vel para tomada de decis√£o estrat√©gica e monitoramento da sa√∫de do projeto.")

# Sidebar e sele√ß√£o de projeto
project_id = display_sidebar()

if not project_id:
    st.info("Selecione um projeto na barra lateral para visualizar os dados.")
    st.stop()

# Carregar dados
latest_data = get_latest_metrics(project_id)
history_data = get_metrics_history(project_id)

if not latest_data:
    render_no_data()
    st.stop()

# --- M√©tricas Chave ---
st.header("KPIs Principais", divider='blue')
maintainability = latest_data.get('maintainability', {})

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric(
        label="Taxa de D√≠vida T√©cnica",
        value=f"{maintainability.get('debtRatio', '*' )}%",
        help="Propor√ß√£o do esfor√ßo de refatora√ß√£o necess√°rio em rela√ß√£o ao custo de desenvolvimento."
    )
with col2:
    st.metric(
        label="Rating de Manutenibilidade",
        value=format_rating(maintainability.get('rating')),
        help="Avalia√ß√£o da manutenibilidade do c√≥digo (A-E)."
    )
with col3:
    st.metric(
        label="Lead Time para Mudan√ßas",
        value="*", # Mocked data
        help="Tempo m√©dio desde o commit at√© a produ√ß√£o."
    )
with col4:
    st.metric(
        label="Change Failure Rate",
        value="*", # Mocked data
        help="Percentual de deploys que causam falhas em produ√ß√£o."
    )

# --- Quality Gate para C√≥digo Novo ---
st.subheader("Quality Gate em C√≥digo Novo (Leak Period)")
new_code = latest_data.get('newCode', {})

col1, col2 = st.columns(2)
with col1:
    st.metric("Novos Bugs", new_code.get('bugs', '*'), delta_color="inverse")
with col2:
    st.metric("Novas Vulnerabilidades", new_code.get('vulnerabilities', '*'), delta_color="inverse")

# --- Visualiza√ß√µes ---
st.header("An√°lise Visual", divider='blue')

col1, col2 = st.columns(2)

with col1:
    # Gr√°fico de Pizza: D√≠vida T√©cnica vs. Esfor√ßo Total
    st.subheader("Composi√ß√£o do Esfor√ßo")
    debt_ratio = maintainability.get('debtRatio', 0)
    esforco_produtivo = 100 - debt_ratio
    
    fig_pie = go.Figure(data=[go.Pie(
        labels=['Esfor√ßo Produtivo', 'Pagamento de D√≠vida'],
        values=[esforco_produtivo, debt_ratio],
        hole=.4,
        marker_colors=['#2575FC', '#FFB000']
    )])
    fig_pie.update_layout(legend_title_text='Tipo de Esfor√ßo', height=400)
    st.plotly_chart(fig_pie, use_container_width=True)

with col2:
    # Gr√°fico de Linha: Tend√™ncia da D√≠vida T√©cnica
    st.subheader("Tend√™ncia da D√≠vida T√©cnica Acumulada")
    if history_data:
        df_history = pd.DataFrame(history_data)
        df_history['timestamp'] = pd.to_datetime(df_history['timestamp'])
        df_history['technicalDebtHours'] = df_history['technicalDebtMinutes'] / 60

        fig_line = px.line(
            df_history,
            x='timestamp',
            y='technicalDebtHours',
            title="Evolu√ß√£o da D√≠vida T√©cnica (em horas)",
            labels={'timestamp': 'Data', 'technicalDebtHours': 'D√≠vida (horas)'},
            markers=True
        )
        fig_line.update_layout(height=400)
        st.plotly_chart(fig_line, use_container_width=True)
    else:
        st.info("Dados hist√≥ricos insuficientes para gerar o gr√°fico de tend√™ncia.")
