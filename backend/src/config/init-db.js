#!/usr/bin/env node
// Script para inicializar o banco de dados PostgreSQL
const fs = require('fs');
const path = require('path');
const { pool, testConnection } = require('./database');

async function initializeDatabase() {
  console.log('üöÄ Inicializando banco de dados PostgreSQL...\n');

  // Testa conex√£o
  console.log('üì° Testando conex√£o...');
  const connected = await testConnection();

  if (!connected) {
    console.error('‚ùå N√£o foi poss√≠vel conectar ao banco de dados');
    console.error('Verifique se a vari√°vel DATABASE_URL est√° configurada corretamente');
    process.exit(1);
  }

  // L√™ o schema SQL
  console.log('\nüìÑ Lendo arquivo de schema...');
  const schemaPath = path.join(__dirname, 'schema.sql');

  let schemaSql;
  try {
    schemaSql = fs.readFileSync(schemaPath, 'utf8');
    console.log('‚úÖ Schema carregado');
  } catch (err) {
    console.error('‚ùå Erro ao ler schema.sql:', err.message);
    process.exit(1);
  }

  // Executa o schema
  console.log('\nüîß Criando tabelas e fun√ß√µes...');
  try {
    await pool.query(schemaSql);
    console.log('‚úÖ Schema aplicado com sucesso!');
  } catch (err) {
    console.error('‚ùå Erro ao aplicar schema:', err.message);
    console.error(err);
    process.exit(1);
  }

  // Verifica tabelas criadas
  console.log('\nüîç Verificando tabelas criadas...');
  try {
    const result = await pool.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
        AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);

    console.log('\nüìä Tabelas dispon√≠veis:');
    result.rows.forEach(row => {
      console.log(`  ‚úì ${row.table_name}`);
    });

    // Verifica fun√ß√µes criadas
    const functionsResult = await pool.query(`
      SELECT routine_name
      FROM information_schema.routines
      WHERE routine_schema = 'public'
        AND routine_type = 'FUNCTION'
      ORDER BY routine_name
    `);

    console.log('\n‚öôÔ∏è  Fun√ß√µes dispon√≠veis:');
    functionsResult.rows.forEach(row => {
      console.log(`  ‚úì ${row.routine_name}`);
    });

  } catch (err) {
    console.error('‚ùå Erro ao verificar tabelas:', err.message);
  }

  // Estat√≠sticas do banco
  console.log('\nüìà Estat√≠sticas iniciais:');
  try {
    const metricsCount = await pool.query('SELECT COUNT(*) FROM sonarcloud_metrics');
    const deploymentsCount = await pool.query('SELECT COUNT(*) FROM dora_deployments');

    console.log(`  ‚Ä¢ M√©tricas SonarCloud: ${metricsCount.rows[0].count}`);
    console.log(`  ‚Ä¢ Deployments DORA: ${deploymentsCount.rows[0].count}`);
  } catch (err) {
    console.error('‚ùå Erro ao buscar estat√≠sticas:', err.message);
  }

  console.log('\n‚ú® Banco de dados inicializado com sucesso!');
  console.log('üéØ Pronto para receber dados\n');

  await pool.end();
  process.exit(0);
}

// Executar se chamado diretamente
if (require.main === module) {
  initializeDatabase().catch(err => {
    console.error('‚ùå Erro fatal:', err);
    process.exit(1);
  });
}

module.exports = { initializeDatabase };
